FROM public.ecr.aws/lambda/python:3.9-arm64 as ffmpeg-builder

RUN yum update -y && \
    yum install -y tar xz wget gcc make autoconf automake cmake git && \
    mkdir -p /ffmpeg_build

WORKDIR /ffmpeg_build

# Build a minimal FFmpeg with only the required components
RUN git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git && \
    cd FFmpeg && \
    ./configure \
      --prefix=/usr/local \
      --disable-debug \
      --disable-doc \
      --disable-ffplay \
      --disable-ffprobe \
      --disable-static \
      --disable-network \
      --disable-autodetect \
      --disable-everything \
      --enable-small \
      --enable-avcodec \
      --enable-avformat \
      --enable-avfilter \
      --enable-swresample \
      --enable-protocol=file \
      # Ensure all required demuxers are enabled
      --enable-demuxer=mov,mp3,wav,aac,ogg,flac,matroska,mp4,m4a \
      # Ensure all required decoders are enabled
      --enable-decoder=pcm_*,mp3,aac,vorbis,flac,alac \
      # Enable the PCM encoder needed for the output format
      --enable-encoder=pcm_s16le \
      # Enable audio filtering capabilities needed
      --enable-filter=aresample,aformat,anull,atrim,acopy \
      --extra-cflags="-Os -ffunction-sections -fdata-sections" \
      --extra-ldflags="-Wl,--gc-sections" && \
    make -j$(nproc) && \
    make install

FROM public.ecr.aws/lambda/python:3.9-arm64

COPY --from=ffmpeg-builder /usr/local/bin/ffmpeg /usr/local/bin/ffmpeg
COPY --from=ffmpeg-builder /usr/local/lib /usr/local/lib

RUN ldconfig /usr/local/lib

# Set up working directory
WORKDIR /var/task

# Install Whisper and its dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Pre-download the Whisper model during build
# The models are cached in ~/.cache/whisper by default
# Create a script that uses the library's own download mechanism
RUN mkdir -p /root/.cache/whisper
COPY download_model.py .
RUN python download_model.py

# Make the cache directory accessible and relocate it to a standard location in the Lambda environment
RUN mkdir -p /var/task/.cache && \
    cp -r /root/.cache/whisper /var/task/.cache/ && \
    chmod -R 755 /var/task/.cache

# Set environment variable to redirect the cache location
ENV XDG_CACHE_HOME=/var/task/.cache

# Copy your Lambda function code
COPY app.py .

# Test the installation with the exact command your code uses
RUN ffmpeg -version && \
    # Also test conversion from wav and m4a formats (will fail safely but verify command syntax)
    ffmpeg -nostdin -threads 0 -i /dev/null -f s16le -ac 1 -acodec pcm_s16le -ar 16000 - || true

# Set the CMD to your handler
CMD ["app.handler"]
